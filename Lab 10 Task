Question 1 ;


#include <iostream>
using namespace std;
// Define a node structure
struct Node {
 int data;
 Node* next;
 Node(int val) : data(val), next(nullptr) {}
};
// Define the linked list class
class LinkedList {
public:
 Node* head;
 LinkedList() : head(nullptr) {}
 // Function to insert a node at the end of the list
 void insertAtEnd(int data) {
 Node* newNode = new Node(data);
 if (!head) {
 head = newNode;
 return;
 }
 Node* temp = head;
 while (temp->next) {
 temp = temp->next;
 }
 temp->next = newNode;
 }
 // Function to insert a node at the middle of the list
 void insertAtMiddle(int data) {
 Node* newNode = new Node(data);
 // If the list is empty, the new node becomes the head
 if (!head) {
 head = newNode;
 return;
 }
 // If the list has only one node, insert after that node
 if (!head->next) {
 head->next = newNode;
 return;
 }
 Node* slow = head;
 Node* fast = head;
 Node* prev = nullptr;
 // Use two pointers to find the middle
 while (fast && fast->next) {
 prev = slow;
 slow = slow->next;
 fast = fast->next->next;
 }
 // Insert the new node at the determined middle position
 if (!fast) { // Even-sized list
 newNode->next = slow;
 prev->next = newNode;
 } else { // Odd-sized list
 newNode->next = slow->next;
 slow->next = newNode;
 }
 }
 // Function to print the list
 void printList() {
 Node* temp = head;
 while (temp) {
 cout << temp->data << " -> ";
 temp = temp->next;
 }
 cout << "NULL" << endl;
 }
};
int main() {
 LinkedList list;
 // Add some nodes to the list
 list.insertAtEnd(1);
 list.insertAtEnd(2);
 list.insertAtEnd(3);
 list.insertAtEnd(4);
 cout << "Original List: ";
 list.printList();
 // Insert a node at the middle
 list.insertAtMiddle(99);
 cout << "After inserting at middle: ";
 list.printList();
 return 0;
}



Question 2 ;


#include <iostream>
using namespace std;
// Define a node structure
struct Node {
 int data;
 Node* next;
 Node(int val) : data(val), next(nullptr) {}
};
// Define the linked list class
class LinkedList {
public:
 Node* head;
 LinkedList() : head(nullptr) {}
 // Function to insert a node at the end of the list
 void insertAtEnd(int data) {
 Node* newNode = new Node(data);
 if (!head) {
 head = newNode;
 return;
 }
 Node* temp = head;
 while (temp->next) {
 temp = temp->next;
 }
 temp->next = newNode;
 }
 // Function to delete the first occurrence of a given value
 void deleteByValue(int value) {
 if (!head) { // Case: List is empty
 cout << "List is empty. Nothing to delete." << endl;
 return;
 }
 // Case: The node to delete is the head
 if (head->data == value) {
 Node* temp = head;
 head = head->next;
 delete temp;
 cout << "Deleted " << value << " from the list." << endl;
 return;
 }
 // Traverse the list to find the node with the given value
 Node* current = head;
 Node* prev = nullptr;
 while (current && current->data != value) {
 prev = current;
 current = current->next;
 }
 // Case: Value not found
 if (!current) {
 cout << "Value " << value << " not found in the list." << endl;
 return;
 }
 // Unlink and delete the node
 prev->next = current->next;
 delete current;
 cout << "Deleted " << value << " from the list." << endl;
 }
 // Function to print the list
 void printList() {
 Node* temp = head;
 while (temp) {
 cout << temp->data << " -> ";
 temp = temp->next;
 }
 cout << "NULL" << endl;
 }
};
int main() {
 LinkedList list;
 // Add some nodes to the list
 list.insertAtEnd(1);
 list.insertAtEnd(2);
 list.insertAtEnd(3);
 list.insertAtEnd(4);
 cout << "Original List: ";
 list.printList();
 // Delete a node by value
 list.deleteByValue(3);
 cout << "After deleting 3: ";
 list.printList();
 // Try to delete a non-existing value
 list.deleteByValue(5);
 cout << "After attempting to delete 5: ";
 list.printList();
 // Delete the head node
 list.deleteByValue(1);
 cout << "After deleting 1: ";
 list.printList();
 return 0;
}


Question 3 ;


#include <iostream>
using namespace std;
// Define a node structure
struct Node {
 int data;
 Node* next;
 Node(int val) : data(val), next(nullptr) {}
};
// Define the linked list class
class LinkedList {
public:
 Node* head;
 LinkedList() : head(nullptr) {}
 // Function to insert a node at the end of the list
 void insertAtEnd(int data) {
 Node* newNode = new Node(data);
 if (!head) {
 head = newNode;
 return;
 }
 Node* temp = head;
 while (temp->next) {
 temp = temp->next;
 }
 temp->next = newNode;
 }
 // Function to count the total number of nodes in the list
 int countNodes() {
 int count = 0;
 Node* temp = head;
 while (temp) {
 count++;
 temp = temp->next;
 }
 return count;
 }
 // Function to print the list
 void printList() {
 Node* temp = head;
 while (temp) {
 cout << temp->data << " -> ";
 temp = temp->next;
 }
 cout << "NULL" << endl;
 }
};
int main() {
 LinkedList list;
 // Add some nodes to the list
 list.insertAtEnd(1);
 list.insertAtEnd(2);
 list.insertAtEnd(3);
 list.insertAtEnd(4);
 cout << "Linked List: ";
 list.printList();
 // Get the total number of nodes
 int totalNodes = list.countNodes();
 cout << "Total number of nodes: " << totalNodes << endl;
 return 0;
}



Question 4 ;


#include <iostream>
using namespace std;
// Define a node structure for a doubly linked list
struct Node {
 int data;
 Node* next;
 Node* prev;
 Node(int val) : data(val), next(nullptr), prev(nullptr) {}
};
// Define the doubly linked list class
class DoublyLinkedList {
public:
 Node* head;
 Node* tail;
 DoublyLinkedList() : head(nullptr), tail(nullptr) {}
 // Function to insert a node at the end of the list
 void insertAtEnd(int data) {
 Node* newNode = new Node(data);
 if (!head) {
 head = tail = newNode;
 return;
 }
 tail->next = newNode;
 newNode->prev = tail;
 tail = newNode;
 }
 // Function to merge another doubly linked list with this list
 void mergeLists(DoublyLinkedList& otherList) {
 if (!otherList.head) { // If the other list is empty, do nothing
 return;
 }
 if (!head) { // If this list is empty, set head and tail to other list's head and tail
 head = otherList.head;
 tail = otherList.tail;
 } else { // Otherwise, link the two lists
 tail->next = otherList.head;
 otherList.head->prev = tail;
 tail = otherList.tail;
 }
 // Clear the other list's pointers (optional)
 otherList.head = nullptr;
 otherList.tail = nullptr;
 }
 // Function to print the list
 void printList() {
 Node* temp = head;
 while (temp) {
 cout << temp->data << " <-> ";
 temp = temp->next;
 }
 cout << "NULL" << endl;
 }
};
int main() {
 DoublyLinkedList list1;
 DoublyLinkedList list2;
 // Add some nodes to list1
 list1.insertAtEnd(1);
 list1.insertAtEnd(2);
 list1.insertAtEnd(3);
 // Add some nodes to list2
 list2.insertAtEnd(4);
 list2.insertAtEnd(5);
 list2.insertAtEnd(6);
 cout << "List 1: ";
 list1.printList();
 cout << "List 2: ";
 list2.printList();
 // Merge list2 into list1
 list1.mergeLists(list2);
 cout << "Merged List: ";
 list1.printList();
 return 0;
}



Question 5:


#include <iostream>
using namespace std;
// Define a node structure for a doubly linked list
struct Node {
 int data;
 Node* next;
 Node* prev;
 Node(int val) : data(val), next(nullptr), prev(nullptr) {}
};
// Define the doubly linked list class
class DoublyLinkedList {
public:
 Node* head;
 Node* tail;
 DoublyLinkedList() : head(nullptr), tail(nullptr) {}
 // Insert a node at any specified position
 void insertAtPosition(int data, int position) {
 Node* newNode = new Node(data);
 if (position <= 1) { // Insert at the beginning
 if (!head) {
 head = tail = newNode;
 } else {
 newNode->next = head;
 head->prev = newNode;
 head = newNode;
 }
 return;
 }
 Node* temp = head;
 int currentPosition = 1;
 // Traverse to the position before the insertion point
 while (temp && currentPosition < position - 1) {
 temp = temp->next;
 currentPosition++;
 }
 if (!temp) { // Insert at the end if position is beyond list length
 if (!head) { // If the list is empty
 head = tail = newNode;
 } else {
 tail->next = newNode;
 newNode->prev = tail;
 tail = newNode;
 }
 } else { // Insert at the specified position
 newNode->next = temp->next;
 newNode->prev = temp;
 if (temp->next) {
 temp->next->prev = newNode;
 } else {
 tail = newNode; // Update tail if new node is at the end
 }
 temp->next = newNode;
 }
 }
 // Delete a node from the start of the list
 void deleteFromStart() {
 if (!head) {
 cout << "List is empty. Nothing to delete from the start." << endl;
 return;
 }
 Node* temp = head;
 head = head->next;
 if (head) {
 head->prev = nullptr;
 } else {
 tail = nullptr; // List is now empty
 }
 delete temp;
 cout << "Deleted node from start." << endl;
 }
 // Delete a node from the end of the list
 void deleteFromEnd() {
 if (!tail) {
 cout << "List is empty. Nothing to delete from the end." << endl;
 return;
 }
Node* temp = tail;
 tail = tail->prev;
 if (tail) {
 tail->next = nullptr;
 } else {
 head = nullptr; // List is now empty
 }
 delete temp;
 cout << "Deleted node from end." << endl;
 }
 // Display the list in a presentable format
 void displayList() {
 if (!head) {
 cout << "List is empty." << endl;
 return;
 }
 cout << "Doubly Linked List: ";
 Node* temp = head;
 while (temp) {
 cout << temp->data;
 if (temp->next) cout << " <-> ";
 temp = temp->next;
 }
 cout << " -> NULL" << endl;
 }
};
int main() {
 DoublyLinkedList list;
 int choice, data, position;
 // Display menu only once
 cout << "Menu:\n";
 cout << "1. Insert at any position\n";
 cout << "2. Delete from start\n";
 cout << "3. Delete from end\n";
 cout << "4. Display list\n";
 cout << "5. Exit\n";
 while (true) {
 cout << "\nEnter your choice: ";
 cin >> choice;
 switch (choice) {
 case 1:
 cout << "Enter data to insert: ";
 cin >> data;
 cout << "Enter position to insert: ";
 cin >> position;
 list.insertAtPosition(data, position);
 break;
 case 2:
 list.deleteFromStart();
 break;
 case 3:
 list.deleteFromEnd();
 break;
 case 4:
 list.displayList();
 break;
 case 5:
 cout << "Exiting..." << endl;
 return 0;
 default:
 cout << "Invalid choice! Please try again." << endl;
 }
 }
 return 0;
}
